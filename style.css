// =====================
// FLOATING AI BUTTON WITH RANDOMIZED QUESTIONS
// =====================
document.addEventListener("DOMContentLoaded", () => {
  const aiButton = document.getElementById("ai-button");
  const aiPopup = document.getElementById("ai-popup");
  const aiClose = document.getElementById("ai-close");
  const aiQuestion = document.getElementById("ai-question");
  const aiAnswer = document.getElementById("ai-answer");

  // Industry questions pool
  const challenges = {
    "Telecom": [
      { q: "A telecom firm is losing customers. Which strategy helps first?", a: "Improve network coverage and customer service." },
      { q: "How can a telecom reduce churn?", a: "Offer loyalty rewards and personalized plans." },
      { q: "Which technology can improve telecom operations?", a: "Implement AI-powered network monitoring and predictive maintenance." }
    ],
    "Finance": [
      { q: "A bank wants to attract Gen Z. Best approach?", a: "Offer mobile-first digital banking with low fees." },
      { q: "A fintech startup wants growth. Key focus?", a: "Enhancing mobile user experience and security." },
      { q: "How can banks reduce loan default risk?", a: "Use AI-driven credit scoring and personalized lending." }
    ],
    "Healthcare": [
      { q: "A hospital wants to cut wait times. Best solution?", a: "Implement online scheduling and digital check-ins." },
      { q: "How can clinics improve patient follow-ups?", a: "Use automated reminders and telehealth consultations." },
      { q: "What technology improves surgery outcomes?", a: "Adopt robotic-assisted surgery and AI diagnostic tools." }
    ],
    "Retail": [
      { q: "An e-commerce site wants repeat sales. What helps?", a: "Personalized product recommendations and loyalty programs." },
      { q: "A store wants to increase weekend foot traffic. Strategy?", a: "Offer weekend-exclusive discounts and in-store events." },
      { q: "How can retailers predict demand better?", a: "Use AI analytics and track seasonal buying trends." }
    ]
  };

  // Keep track of last used question per industry to avoid immediate repeats
  const lastUsed = { Telecom: null, Finance: null, Healthcare: null, Retail: null };

  // Show popup
  aiButton.addEventListener("click", () => aiPopup.style.display = "flex");

  // Close popup
  aiClose.addEventListener("click", () => {
    aiPopup.style.display = "none";
    aiAnswer.innerHTML = "";
    aiQuestion.innerHTML = "Click a button to start your challenge!";
  });

  // Generate a random challenge for an industry
  window.generateChallenge = (industry) => {
    const list = challenges[industry];
    
    let randomChallenge;
    do {
      randomChallenge = list[Math.floor(Math.random() * list.length)];
    } while (lastUsed[industry] === randomChallenge.q && list.length > 1);

    lastUsed[industry] = randomChallenge.q; // Save last question

    aiQuestion.innerHTML = `<strong>${industry} Challenge:</strong> ${randomChallenge.q}`;
    aiAnswer.innerHTML = `<p><em>Think about your answer, then click to reveal solution:</em></p>
                          <button onclick="revealSolution('${industry}','${randomChallenge.q.replace(/'/g,"\\'")}')">Show Solution</button>`;
  };

  // Reveal solution
  window.revealSolution = (industry, questionText) => {
    const challenge = challenges[industry].find(c => c.q === questionText);
    aiAnswer.innerHTML = `<p><strong>Solution:</strong> ${challenge.a}</p>
                          <p>ðŸŽ‰ Congratulations! You completed the challenge.</p>`;
  };

  // =====================
  // GSAP SCROLL ANIMATIONS
  // =====================
  gsap.registerPlugin(ScrollTrigger);

  gsap.utils.toArray(".fade-in").forEach(el => {
    gsap.from(el, {
      opacity: 0,
      duration: 1.2,
      ease: "power2.out",
      scrollTrigger: { trigger: el, start: "top 85%" }
    });
  });

  gsap.utils.toArray(".slide-up").forEach(el => {
    gsap.from(el, {
      y: 50,
      opacity: 0,
      duration: 1.2,
      ease: "power2.out",
      scrollTrigger: { trigger: el, start: "top 85%" }
    });
  });

  gsap.utils.toArray(".scale-in").forEach(el => {
    gsap.from(el, {
      scale: 0.9,
      opacity: 0,
      duration: 1.2,
      ease: "power2.out",
      scrollTrigger: { trigger: el, start: "top 85%" }
    });
  });
});
